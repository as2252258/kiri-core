<?php

namespace Server\Constrict;

use Http\Context\Context;
use Server\Message\Request as RequestMessage;
use Http\Context\Response;
use Kiri\Kiri;
use ReflectionException;
use Server\RequestInterface;


/**
 * @mixin RequestMessage
 */
class Request implements RequestInterface
{


	/**
	 * @param $name
	 * @param $args
	 * @return mixed
	 */
	public function __call($name, $args)
	{
		$request = Context::getContext(RequestMessage::class);
		if (property_exists($request, $name)) {
			return $request->{$name};
		}
		return $request->{$name}(...$args);
	}


	/**
	 * @param $name
	 * @return mixed
	 */
	public function __get($name): mixed
	{
		// TODO: Change the autogenerated stub
		return Context::getContext(RequestMessage::class)->{$name};
	}


	/**
	 * @param \Swoole\Http\Request $request
	 * @return Request
	 */
	public static function create(\Swoole\Http\Request $request): RequestInterface
	{
		Context::setContext(Response::class, new Response());

		Context::setContext(RequestMessage::class, RequestMessage::parseRequest($request));

		return Kiri::getDi()->get(Request::class);
	}
}
