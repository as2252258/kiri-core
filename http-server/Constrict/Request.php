<?php

namespace Server\Constrict;

use Http\Context\Context;
use Http\Context\Request as HttpResponse;
use Http\Context\Response;
use Kiri\Kiri;
use ReflectionException;
use Server\RequestInterface;


/**
 * @mixin HttpResponse
 */
class Request implements RequestInterface
{


	/**
	 * @param $name
	 * @param $args
	 * @return mixed
	 */
	public function __call($name, $args)
	{
		if (!Context::hasContext(HttpResponse::class)) {
			$request = Context::setContext(HttpResponse::class, new HttpResponse());
		} else {
			$request = Context::getContext(HttpResponse::class);
		}
		if (property_exists($request, $name)) {
			return $request->{$name};
		}
		return $request->{$name}(...$args);
	}


	/**
	 * @param $name
	 * @return mixed
	 */
	public function __get($name): mixed
	{
		// TODO: Change the autogenerated stub
		return Context::getContext(HttpResponse::class)->{$name};
	}


	/**
	 * @param \Swoole\Http\Request $request
	 * @return Request
	 * @throws ReflectionException
	 */
	public static function create(\Swoole\Http\Request $request): RequestInterface
	{
		Context::setContext(Response::class, new Response());

		$sRequest = new HttpResponse();

		var_dump($request->getData(), $request->header);

		$sRequest->setHeaders(array_merge($request->header, $request->server));

		$sRequest->setUri($sRequest->getRequestUri());
		$sRequest->setClientId($request->fd);

		$sRequest->setRawContent($request->rawContent(), $sRequest->getContentType());
		$sRequest->setFiles($request->files ?? []);
		$sRequest->setPosts($request->post ?? []);
		$sRequest->setGets($request->get ?? []);

		Context::setContext(HttpResponse::class, $sRequest);

		return Kiri::getDi()->get(Request::class);
	}
}
